name: Run Tests and Upload Coverage

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  repository_dispatch:
    types: [ deploy ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov codecov

      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=${{ github.workspace }}" >> $GITHUB_ENV

      - name: Run tests
        run: pytest --cov --cov-branch --cov-report=xml

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
  deploy:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ca-central-1 # ou sua regi√£o

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ca-central-1 | \
          docker login --username AWS --password-stdin 011706314791.dkr.ecr.ca-central-1.amazonaws.com/meli-challenge/ms-seller

      - name: Build and Push Docker Image
        run: |
          docker build -t ms-seller .
          docker tag ms-seller:latest 011706314791.dkr.ecr.ca-central-1.amazonaws.com/meli-challenge/ms-seller:latest
          docker push 011706314791.dkr.ecr.ca-central-1.amazonaws.com/meli-challenge/ms-seller

      - name: Configure Kubernetes credentials (kubectl)
        run: |
          aws eks update-kubeconfig --region ca-central-1 --name mercadolibre-case

      - name: Deploy to EKS
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml